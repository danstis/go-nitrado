name: Build Test Release

on:
  push:
    branches:
      - master
      - beta
      - "feature/*"
      - "fix/*"
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Set up Go 1.x
        uses: actions/setup-go@v5.5.0
        with:
          go-version: ^1.19
        id: go

      - name: Build windows x64
        run: go build -v ./nitrado/
        env:
          GOOS: windows
          GOARCH: amd64

      - name: Build linux x86
        run: go build -v ./nitrado/
        env:
          GOOS: linux
          GOARCH: 386

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up Go 1.x
        uses: actions/setup-go@v5.5.0
        with:
          go-version: ^1.19
        id: go

      - name: Test
        run: go test -v -race -coverprofile=cover.out -json ./nitrado/ > test-report.out

      - name: golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.2.2
          golangci-lint run --output.checkstyle.path golangci-report.xml --issues-exit-code 0 ./...
          ls -l golangci-report.xml

      - name: Install deepsource CLI
        if: ${{ github.actor != 'dependabot[bot]' }}
        run: curl https://deepsource.io/cli | sh

      - name: Upload Coverage data to deepsource
        if: ${{ github.actor != 'dependabot[bot]' }}
        run: ./bin/deepsource report --analyzer test-coverage --key go --value-file ./cover.out
        env:
          DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}

      - name: Upload coverage to Codecov
        if: ${{ github.actor != 'dependabot[bot]' }}
        uses: codecov/codecov-action@v5.4.3
        with:
          files: ./cover.out
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v4.0.1 # https://github.com/marketplace/actions/gittools
        with:
          versionSpec: '6.x'
      - name: Version with GitVersion 
        id: gitversion # step id used as a reference for output values
        uses: gittools/actions/gitversion/execute@v4.0.1 # https://github.com/marketplace/actions/gittools

      - name: SonarCloud Scan
        if: ${{ github.actor != 'dependabot[bot]' }}
        uses: SonarSource/sonarqube-scan-action@v5.2.0
        with:
          args: >
            -Dsonar.projectVersion=${{ steps.gitversion.outputs.FullSemVer }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    permissions:
      # Required: allow read access to the content for analysis.
      contents: read
      # Optional: allow read access to pull requests. Use with `only-new-issues` option.
      pull-requests: read
    steps:
      - name: Check out code
        uses: actions/checkout@v5.0.0

      - name: Set up Go 1.x
        uses: actions/setup-go@v5.5.0
        with:
          go-version: ^1.19
        id: go

      - name: Run golangci-lint # https://github.com/marketplace/actions/golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest

  tag:
    name: Tag and Release
    runs-on: ubuntu-latest
    needs: [build, test, lint]
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Check out code
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Set up Go 1.x
        uses: actions/setup-go@v5.5.0
        with:
          go-version: ^1.19
        id: go

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v4.0.1 # https://github.com/marketplace/actions/gittools
        with:
          versionSpec: '6.x'
      - name: Version with GitVersion 
        id: gitversion # step id used as a reference for output values
        uses: gittools/actions/gitversion/execute@v4.0.1 # https://github.com/marketplace/actions/gittools

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        if: ${{ steps.gitversion.outputs.PreReleaseTagWithDash == '' }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.gitversion.outputs.FullSemVer }}
          release_branches: master
          tag_prefix: v

      - name: Check out code
        uses: actions/checkout@v5.0.0
        if: ${{ steps.gitversion.outputs.PreReleaseTagWithDash == '' }}
        with:
          fetch-depth: 0

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        if: ${{ steps.gitversion.outputs.PreReleaseTagWithDash == '' }}
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
